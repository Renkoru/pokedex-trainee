Here will be React educational project.

https://pokeapi.co/

https://pokemondb.net/sprites
https://img.pokemondb.net/sprites/black-white/anim/normal/fomantis.gif

https://www.pokemon.com/us/pokemon-tcg/pokemon-cards/sm-series/sm1/16/



#+NAME: stab
#+BEGIN_SRC js
  return React.createElement('div', {className: 'shopping-list'},
    React.createElement('h1', /* ... h1 children ... */),
    React.createElement('ul', /* ... ul children ... */)
  );
#+END_SRC

* Articles to Analyze and include to the course
1. Selectors in Redux are a MUST. https://hackernoon.com/selectors-in-redux-are-a-must-d6b0637c79b7
2. Severlas stores and Selectors http://randycoulman.com/blog/2016/09/20/redux-reducer-selector-asymmetry/
* UI component libs to use
1. Rebass
2. Grommet https://v2.grommet.io/
3. https://react.semantic-ui.com/
4. http://www.material-ui.com/
5. Bootstrap
* Todo
1. Write Lisp function to convert browser styles to JS object format
* Plan
1. JS add dom element hi
2. JS add dom element button
3. Refactor to JS components (functions)
4. Add App component
5. Add renderer function
6. Add player component. Use object as container for function arguments *function({name, age, level})*
7. Add player generator. (A lot of names)
8. Add styles
9. Use button component to say Hi!
10. Use arrow function, imports?, add webpack to solve this
11. Add location and show how browser rerenders all. And when it resets. (Enable 'Rendering' devtool in chrome)
12. Add a 'tick' function to rerender React elements.
13. Use ES6 React class for App component. Add state, remove tick function.
14. Add componentDidMount, componentWillUnmount for Player component to show lifesycle methods (release resources)
    Pokeballs
15. Conditional rendering. Pokeballs, inline conditionals
16. Add react router.
17. React Dev Tools
