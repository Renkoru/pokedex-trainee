* Result plan
** Create index.html
#+BEGIN_SRC web
  <!DOCTYPE html>
  <html>
    <head>
    </head>

    <body>
      <h1>
        React Course.
      </h1>
    </body>
  </html>
#+END_SRC


** Add Javascript file
#+BEGIN_SRC web
  <script type="text/javascript" src="./main.js" async defer></script>
#+END_SRC
** Add Players Array
#+BEGIN_SRC js2
  var player = document.createElement('div');
  player.innerHTML = name;
#+END_SRC
** Add Players Div
- Code duplication
- Create function to create a component
** Create component function
** Html Tag is also looks like a component?
** Add random player generator, utils file
#+BEGIN_SRC js2
function getRandom(maxNumber) {
    var baseNumber = Math.floor((Math.random() * 1000) + 1);
    return  baseNumber % maxNumber;
}
#+END_SRC
** Use random generator
** Add button component to add players.
#+BEGIN_SRC js2
  var button = document.createElement('button');
  button.innerHTML = title;
  button.addEventListener ('click', onClick);
#+END_SRC
** Add reset location button
** Add ticker function
** It is time to Webpack
** It is time to React
#+BEGIN_SRC web
    <script src="https://unpkg.com/react@16/umd/react.development.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js" crossorigin></script>
#+END_SRC
** Create component App
** Use JSX
** Split components to its files
* Rest

https://pokeapi.co/

https://pokemondb.net/sprites
https://img.pokemondb.net/sprites/black-white/anim/normal/fomantis.gif

https://www.pokemon.com/us/pokemon-tcg/pokemon-cards/sm-series/sm1/16/



#+NAME: stab
#+BEGIN_SRC js
  return React.createElement('div', {className: 'shopping-list'},
    React.createElement('h1', /* ... h1 children ... */),
    React.createElement('ul', /* ... ul children ... */)
  );
#+END_SRC

* Articles to Analyze and include to the course
1. Selectors in Redux are a MUST. https://hackernoon.com/selectors-in-redux-are-a-must-d6b0637c79b7
2. Severlas stores and Selectors http://randycoulman.com/blog/2016/09/20/redux-reducer-selector-asymmetry/
* UI component libs to use
1. Rebass
2. Grommet https://v2.grommet.io/
3. https://react.semantic-ui.com/
4. http://www.material-ui.com/
5. Bootstrap
* Todo
1. Write Lisp function to convert browser styles to JS object format
* Plan
1. JS add dom element hi
2. JS add dom element button
3. Refactor to JS components (functions)
4. Add App component
5. Add renderer function
6. Add player component. Use object as container for function arguments *function({name, age, level})*
7. Add player generator. (A lot of names)
8. Add styles
9. Use button component to say Hi!
10. Use arrow function, imports?, add webpack to solve this
11. Add location and show how browser rerenders all. And when it resets. (Enable 'Rendering' devtool in chrome)
12. Add a 'tick' function to rerender React elements.
13. Use ES6 React class for App component. Add state, remove tick function.
14. Add componentDidMount, componentWillUnmount for Player component to show lifesycle methods (release resources)
    Pokeballs
15. Conditional rendering. Pokeballs, inline conditionals
16. Add react router.
17. React Dev Tools
* Useful reveal slides
http://jr0cket.co.uk/slides/revealjs.html
* 1124
** Lesson Plan
- Show fix of rerendering of Reset location
** Layout
- Login / Regestration
- Navigation
- User Profile
- User list
** Functionality
- Add Post
- Add Friend
- Show Friends Posts. News feed
** Styles
*** classNames
*** styled components
** Usefull links
** Live coding plan
1. Players Profile
2. Error Boundaries with empty pokemon list
3. Add pokemon
4. Fragments to list pokemons
5. Players list with pokemons
6. Context with players list and pokemons
7. HOC to get players from the store
8. Add a Ref and a button to focus an 'Add Player' input
9. Add Portal, a modal for example. ????
* Redux 2 lecture plan
1. *PRE* Refactored all to redux.
2. Use *combineReducers*
3. Use *redux-actions*
4. Middlewares Logger, fetcher
5. Thunk
6. Tests Jest Enzyme. Action, Component.
